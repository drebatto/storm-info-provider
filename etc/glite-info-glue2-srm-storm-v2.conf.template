
# This is the configuration file for the GlueService information provider
# for a site-level BDII

# Now extended for GLUE 2 attributes 

# Many of the entries are commands which will be executed
# using backquotes in perl. They should write to stdout - the return
# code is not relevant except for init and status.

# The init command allows any setup command to be executed
# A non-zero return code will abort the provider
# Environment variables can be set by writing to stdout (x=y)

# NB Config is the same for all BDII flavours so we only need one init script
init = /opt/glite/libexec/glite-info-service-storm init

# The service type should follow the official list in
# http://glueschema.forge.cnaf.infn.it/V12/ServiceType

service_type = emi.storm

# This should be a command which returns the service interface version
# in the format 3[.2[.1]] - for BDII just hardwire to 3.0.0 (LDAP protocol
# version)

get_version = echo ${GLITE_INFO_SERVICE_VERSION}

# A command to return the service endpoint to stdout (uses variables set
# in the init script). The base DN format is standard.

get_endpoint = echo ldap://$STORM_BACKEND_HOST:$BDII_PORT_READ/GLUE2DomainID=$GLITE_INFO_SERVICE_SITE_ID,o=glue

# A command to check the status of the service. The status message should be
# returned to stdout - it can be multi-line, the output will be massaged
# and truncated if necessary. 
# The return code should indicate the status:
# 0 = OK, 1 = Critical, 2 = Warning, 3 = Unknown, other = Other

get_status = /opt/glite/libexec/glite-info-service-test SRM_V2 && /opt/glite/libexec/glite-info-service-storm status

# The URL of a WSDL document describing the service
# If the string does not start with "http" this will be omitted

WSDL_URL = http://sdm.lbl.gov/srm-wg/srm.v2.2.wsdl

# A URL to a web page defining the service semantics, e.g. a manual
# If the string does not start with "http" this will be omitted

semantics_URL = http://sdm.lbl.gov/srm-wg/doc/SRM.v2.2.html

# StartTime: A command to return the service start time.
# This should be a unix timestamp, the info provider converts it to ISO8601

get_starttime = perl -e '@st=stat("/var/run/storm-backend.pid");print "@st[10]\n";'

# Owner: this should return a list of owner VO names, one per line
# Null entries will be omitted
# This needs to be set at config time

get_owner = echo

# A list of AccessControlBaseRule strings to indicate who is allowed to
# have access to the service - at the simplest this is the same as the
# Owner but with the VO names prefixed by "VO:"
# This needs to be set at config time

get_acbr = echo

# New GLUE 2 attributes start here

# Capabilities are not very well-defined yet!

get_capabilities = echo -e "information.model\ninformation.discovery\ninformation.monitoring"

# These three identify the specific implementation as opposed to the generic
# protocol. NB this version is single-valued.

get_implementor = echo emi

get_implementationname = echo StoRM

get_implementationversion = rpm -qa | grep storm-backend-server | cut -d- -f4

# The Quality Level for this endpoint: 1 = development, 2 = testing,
# 3 = pre-production and 4 = production
# No mechanism yet to set this

get_qualitylevel = echo 2

# The ServingState for this Endpoint: 1 = closed, 2 = draining,
# 3 = queueing, 4 = production (NB "production" has a different meaning
# here to the QualityLevel)
# For a BDII there's probably no need to be able to vary this

get_servingstate = echo 4


