#!/usr/bin/python 

# Copyright (c) Istituto Nazionale di Fisica Nucleare (INFN). 2006-2010.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import sys
import argparse
import logging

from utils import *

from glue13 import Glue13
from glue2 import Glue2

MANDATORY = ["SITE_NAME", "STORM_BACKEND_HOST", "STORM_DEFAULT_ROOT",\
    "STORM_FRONTEND_PATH", "STORM_FRONTEND_PORT", "STORM_FRONTEND_PUBLIC_HOST",\
    "STORM_BACKEND_REST_SERVICES_PORT", "VOS", "STORM_ENDPOINT_QUALITY_LEVEL",\
    "STORM_ENDPOINT_CAPABILITY"]

def configuration_sanity_check(configuration, mandatory):
    for key in mandatory:
        if not key in configuration:
            sys.exit('Missing mandatory \"' + key + '\" variable!')
    return

def parse_args():
    parser = argparse.ArgumentParser(description = 'Process glite-info-service-storm-init args')
    parser.add_argument('-f', action = 'store', dest =  'filepath', required = True)
    parser.add_argument('-v', action = 'store', dest = 'logging_level', required = True, type=int)
    return parser.parse_args()

def get_empty_space_info():
    out = {}
    out["total-space"] = 0
    out["available-space"] = 0
    out["used-space"] = 0
    out["free-space"] = 0
    out["unavailable-space"] = 0
    out["reserved-space"] = 0
    out["busy-space"] = 0
    out["nearline-space"] = 0
    return out

def compute_space_info(configuration):
    
    managed_vos = configuration['VOS'].split(' ')
    summary = get_empty_space_info()
    vos = {}
    vfs = get_vfs_list_from_BE(configuration['STORM_BACKEND_HOST'], configuration['STORM_BACKEND_REST_SERVICES_PORT'])
    for vfs_name,vfs_data in vfs.iteritems():
        response = get_vfs_space_info_from_BE(configuration['STORM_BACKEND_HOST'], configuration['STORM_BACKEND_REST_SERVICES_PORT'], vfs_data["token"])    
        vfs[vfs_name]["total-space"] = response["total-space"]
        vfs[vfs_name]["available-space"] = response["available-space"]
        vfs[vfs_name]["used-space"] = response["used-space"]
        vfs[vfs_name]["free-space"] = response["free-space"]
        vfs[vfs_name]["unavailable-space"] = response["unavailable-space"]
        vfs[vfs_name]["reserved-space"] = response["reserved-space"]
        vfs[vfs_name]["busy-space"] = response["busy-space"]
        if vfs_data["voname"] in managed_vos: # excludes voname = .*
            if not (vfs_data["voname"] in vos): # adds VO to VOS list and inits values to 0
                vos[vfs_data["voname"]] = get_empty_space_info()
            vos[vfs_data["voname"]]["total-space"] += response["total-space"]
            vos[vfs_data["voname"]]["available-space"] += response["available-space"]
            vos[vfs_data["voname"]]["used-space"] += response["used-space"]
            vos[vfs_data["voname"]]["free-space"] += response["free-space"]
            vos[vfs_data["voname"]]["unavailable-space"] += response["unavailable-space"]
            vos[vfs_data["voname"]]["reserved-space"] += response["reserved-space"]
            vos[vfs_data["voname"]]["busy-space"] += response["busy-space"]
            vos[vfs_data["voname"]]["nearline-space"] += vfs[vfs_name]["availableNearlineSpace"]
        summary["total-space"] += response["total-space"]
        summary["available-space"] += response["available-space"]
        summary["used-space"] += response["used-space"]
        summary["free-space"] += response["free-space"]
        summary["unavailable-space"] += response["unavailable-space"]
        summary["reserved-space"] += response["reserved-space"]
        summary["busy-space"] += response["busy-space"]
        summary["nearline-space"] += vfs[vfs_name]["availableNearlineSpace"]
    return (vfs, vos, summary)

def main():

    # command line parsing
    arguments = parse_args()

    # init logging and load configuration
    logging.basicConfig(level=arguments.logging_level)

    # load configuration from file    
    configuration = load_configuration_from_file(arguments.filepath)

    # print configuration
    logging.debug('configuration = %s', configuration)

    # check if all mandatory variables exists
    configuration_sanity_check(configuration, MANDATORY)
    
    # get VFSs, VOs and global space use information from backend
    (vfs, vos, summary) = compute_space_info(configuration)

    # print space info
    logging.debug('VFS = %s', vfs)
    logging.debug('VOS = %s', vos)
    logging.debug('SUMMARY = %s', summary)

    # create Glue v1.3 files
    glue13 = Glue13(configuration, {"sas": vfs, "vos": vos, "summary": summary})
    glue13.init()

    # create Glue v2 files
    glue2 = Glue2(configuration, {"sas": vfs, "vos": vos, "summary": summary})
    glue2.init()

    return

if __name__ == '__main__':
    main()