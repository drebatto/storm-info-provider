#!/bin/bash

# Copyright (c) Istituto Nazionale di Fisica Nucleare (INFN). 2006-2010.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

#
# Used kB
#
function get_used_size_kb () {

  cmd="/usr/bin/curl"
  used=`curl -s 'http://$4:$5/info/status/$1' | sed -e 's/[{}]/''/g' | awk -v RS=',"' -F: '/^used-space/ {print $2}'`
  if [ -z ${used} ]; then
    echo "ERROR: ${cmd} return no value; check storm info service status."
    exit 1
  fi  

  # Quota on
  if [ "$3" == "true" ]; then
    # convert in kB (base 10)
    used=$((${used}*1024/1000))
  # Quota off
  else
    # convert in kB (base 10)
    used=$((${used}/1000))
  fi

  export $2=${used}

  return 0

}

#
# Used GB
#
function get_used_size_gb () {

  cmd="/usr/bin/curl"
  used=`curl -s 'http://$4:$5/info/status/$1' | sed -e 's/[{}]/''/g' | awk -v RS=',"' -F: '/^used-space/ {print $2}'`
  if [ -z ${used} ]; then
    echo "ERROR: ${cmd} return no value; check storm info service status."
    exit 1
  fi

  # Quota on
  if [ "$3" == "true" ]; then
    # convert in GB (base 10)
    used=$((${used}*1024/(1000*1000*1000)))
  # Quota off
  else
    # convert in GB (base 10)
    used=$((${used}/(1000*1000*1000)))
  fi

  export $2=${used}

  return 0

}

#
# Free kB
#
function get_free_size_kb () {

  cmd="/usr/bin/curl"
  free=`curl -s 'http://$4:$5/info/status/$1' | sed -e 's/[{}]/''/g' | awk -v RS=',"' -F: '/^free-space/ {print $2}'`
  if [ -z ${free} ]; then
    echo "ERROR: ${cmd} return no value; check storm info service status."
    exit 1
  fi

  # Quota on
  if [ "$3" == "true" ]; then
    # convert in kB (base 10)
    free=$((${free}*1024/1000))
  # Quota off
  else
    # convert in kB (base 10)
    free=$((${free}/1000))
  fi

  export $2=${free}

  return 0

}

#
# Free GB
#
function get_free_size_gb () {

  cmd="/usr/bin/curl"
  free=`curl -s 'http://$4:$5/info/status/$1' | sed -e 's/[{}]/''/g' | awk -v RS=',"' -F: '/^free-space/ {print $2}'`
  if [ -z ${free} ]; then
    echo "ERROR: ${cmd} return no value; check storm info service status."
    exit 1
  fi

  # Quota on
  if [ "$3" == "true" ]; then
    # convert in GB (base 10)
    free=$((${free}*1024/(1000*1000*1000)))
  # Quota off
  else
    # convert in GB (base 10)
    free=$((${free}/(1000*1000*1000)))
  fi

  export $2=${free}

  return 0

}

#
# Total kB
#
function get_total_size_kb () {

  cmd="/usr/bin/curl"
  total=`curl -s 'http://$4:$5/info/status/$1' | sed -e 's/[{}]/''/g' | awk -v RS=',"' -F: '/^total-space/ {print $2}'`
  if [ -z ${free} ]; then
    echo "ERROR: ${cmd} return no value; check storm info service status."
    exit 1
  fi

  # Quota on
  if [ "$3" == "true" ]; then
    # convert in kB (base 10)
    total=$((${total}*1024/1000))
  # Quota off
  else
    # convert in kB (base 10)
    total=$((${total}/1000))
  fi

  export $2=${total}

  return 0

}

#
# Total GB
#
function get_total_size_gb () {

  cmd="/usr/bin/curl"
  total=`curl -s 'http://$4:$5/info/status/$1' | sed -e 's/[{}]/''/g' | awk -v RS=',"' -F: '/^total-space/ {print $2}'`
  if [ -z ${free} ]; then
    echo "ERROR: ${cmd} return no value; check storm info service status."
    exit 1
  fi

  # Quota on
  if [ "$3" == "true" ]; then
    # convert in GB (base 10)
    total=$((${total}*1024/(1000*1000*1000)))
  # Quota off
  else
    # convert in GB (base 10)
    total=$((${total}/(1000*1000*1000)))
  fi

  export $2=${total}

  return 0

}

###
### Main section
###

  # Source configuration file
  if [ $# = 1 ]; then
    source $1
  else
    exit 1
  fi

  # Source utils file
  UTIL=/opt/glite/yaim/functions/utils/manage_conf
  if [ -e ${UTIL} ]; then
    source ${UTIL}
  else
    exit 1
  fi

  FILE=`mktemp`

  # Prepare need variables
  for SA in ${STORM_STORAGEAREA_LIST}; do

    # Convert case
    SA_UPP=`echo ${SA} | tr '[:lower:]' '[:upper:]'`
    SA_LOW=`echo ${SA} | tr '[:upper:]' '[:lower:]'`

    # Remove DNS-like characters from SA_UPP names
    SA_UPP=`echo ${SA_UPP} | sed -e 's/-//g' -e 's/\.//g'`

    x=STORM_${SA_UPP}_TOKEN;           SA_TOKEN=${!x:-${SA_UPP}_TOKEN}
    x=STORM_${SA_UPP}_QUOTA;           SA_QUOTA=${!x}
    x=STORM_${SA_UPP}_VONAME;          SA_VONAME=${!x:-${SA_LOW}}

    # Get size values on SA_TOKEN (in GB)
    get_used_size_gb  ${SA_TOKEN} PARAMETER ${SA_QUOTA} ${STORM_INFO_SERVICE_HOST} ${STORM_INFO_SERVICE_PORT}
    hash_insert SA_USED_SIZE_GB  ${SA_UPP} ${PARAMETER} 
    get_free_size_gb  ${SA_TOKEN} PARAMETER ${SA_QUOTA} ${STORM_INFO_SERVICE_HOST} ${STORM_INFO_SERVICE_PORT}
    hash_insert SA_FREE_SIZE_GB  ${SA_UPP} ${PARAMETER}
    get_total_size_gb ${SA_TOKEN} PARAMETER ${SA_QUOTA} ${STORM_INFO_SERVICE_HOST} ${STORM_INFO_SERVICE_PORT}
    hash_insert SA_TOTAL_SIZE_GB ${SA_UPP} ${PARAMETER}

    # Get size values on SA_TOKEN (in KB)
    get_used_size_kb  ${SA_TOKEN} PARAMETER ${SA_QUOTA} ${STORM_INFO_SERVICE_HOST} ${STORM_INFO_SERVICE_PORT}
    hash_insert SA_USED_SIZE_KB  ${SA_UPP} ${PARAMETER}
    get_free_size_kb  ${SA_TOKEN} PARAMETER ${SA_QUOTA} ${STORM_INFO_SERVICE_HOST} ${STORM_INFO_SERVICE_PORT}
    hash_insert SA_FREE_SIZE_KB  ${SA_UPP} ${PARAMETER}

    # Prepare per-VO and global values
    PERVO_VONAME_INDEX=`echo ${SA_VONAME} | sed -e 's/-//g' -e 's/\.//g'`
    # Add VONAME if missing
    if ! [[ "${PERVO_VONAMES}" =~ "${SA_VONAME}" ]]; then
      PERVO_VONAMES="${PERVO_VONAMES} ${SA_VONAME}"
    fi
    # Sum size values for VONAME and global(in GB)
    x=`hash_find PERVO_USED_SIZE_GB ${PERVO_VONAME_INDEX}`
    y=`hash_find SA_USED_SIZE_GB ${SA_UPP}`
    hash_insert PERVO_USED_SIZE_GB ${PERVO_VONAME_INDEX} $((x+y))
    let GLOBAL_USED_SIZE_GB+=$y

    x=`hash_find PERVO_FREE_SIZE_GB ${PERVO_VONAME_INDEX}`
    y=`hash_find SA_FREE_SIZE_GB ${SA_UPP}`
    hash_insert PERVO_FREE_SIZE_GB ${PERVO_VONAME_INDEX} $((x+y))
    let GLOBAL_FREE_SIZE_GB+=$y

    x=`hash_find PERVO_TOTAL_SIZE_GB ${PERVO_VONAME_INDEX}`
    y=`hash_find  SA_TOTAL_SIZE_GB ${SA_UPP}`
    hash_insert PERVO_TOTAL_SIZE_GB ${PERVO_VONAME_INDEX} $((x+y))
    let GLOBAL_TOTAL_SIZE_GB+=$y

    # Sum size values for VONAME (in KB)
    x=`hash_find PERVO_USED_SIZE_KB ${PERVO_VONAME_INDEX}`
    y=`hash_find SA_USED_SIZE_KB ${SA_UPP}`
    hash_insert PERVO_USED_SIZE_KB ${PERVO_VONAME_INDEX} $((x+y))
    let GLOBAL_USED_SIZE_KB+=$y

    x=`hash_find PERVO_FREE_SIZE_KB ${PERVO_VONAME_INDEX}`
    y=`hash_find SA_FREE_SIZE_KB ${SA_UPP}`
    hash_insert  PERVO_FREE_SIZE_KB ${PERVO_VONAME_INDEX} $((x+y))
    let GLOBAL_FREE_SIZE_KB+=$y

  done

  #==========================================================
  # Create GlueSE entries

  cat >> ${FILE} << EOF
dn: GlueSEUniqueID=${STORM_FRONTEND_PUBLIC_HOST},mds-vo-name=resource,o=grid
GlueSESizeTotal: $((GLOBAL_TOTAL_SIZE_GB))
GlueSESizeFree: $((GLOBAL_FREE_SIZE_GB))
GlueSETotalOnlineSize: $((GLOBAL_TOTAL_SIZE_GB))
GlueSEUsedOnlineSize: $((GLOBAL_USED_SIZE_GB))

EOF
  #==========================================================

  #==========================================================
  # Create GlueSA entries

  for SA in ${STORM_STORAGEAREA_LIST}; do

    # Convert case
    SA_UPP=`echo ${SA} | tr '[:lower:]' '[:upper:]'`
    SA_LOW=`echo ${SA} | tr '[:upper:]' '[:lower:]'`

    # Remove DNS-like characters from SA_UPP names
    SA_UPP=`echo ${SA_UPP} | sed -e 's/-//g' -e 's/\.//g'`

    x=STORM_${SA_UPP}_VONAME;          SA_VONAME=${!x:-${SA_LOW}}
    x=STORM_${SA_UPP}_STORAGECLASS;    SA_STORAGECLASS=${!x:-${STORM_STORAGECLASS}}
    # Convert in uppercase
    SA_STORAGECLASS=`echo ${SA_STORAGECLASS} | tr '[:lower:]' '[:upper:]'`

    # Check the STORAGECLASS
    SA_RETENTION_POLICY="replica"                                         # default
    SA_ACCESS_LATENCY="online"                                            # default
    SA_INSTALLED_ONLINE_CAPACITY=`hash_find SA_TOTAL_SIZE_GB ${SA_UPP}`   # default
    SA_INSTALLED_NEARLINE_CAPACITY=0                                      # default
    if ! [ -z "${SA_STORAGECLASS}" ]; then
      case ${SA_STORAGECLASS} in
        "T1D0")
          SA_RETENTION_POLICY="custodial"
          SA_ACCESS_LATENCY="nearline"
          SA_INSTALLED_ONLINE_CAPACITY=0
          SA_INSTALLED_NEARLINE_CAPACITY=`hash_find SA_TOTAL_SIZE_GB ${SA_UPP}`
          ;;
        "T1D1")
          SA_RETENTION_POLICY="custodial"
          SA_ACCESS_LATENCY="online"
          SA_INSTALLED_ONLINE_CAPACITY=`hash_find SA_TOTAL_SIZE_GB ${SA_UPP}`
          SA_INSTALLED_NEARLINE_CAPACITY=0
          ;;
        "T0D1")
          SA_RETENTION_POLICY="replica"
          SA_ACCESS_LATENCY="online"
          SA_INSTALLED_ONLINE_CAPACITY=`hash_find SA_TOTAL_SIZE_GB ${SA_UPP}`
          SA_INSTALLED_NEARLINE_CAPACITY=0
          ;;
        *)
          SA_RETENTION_POLICY="replica"
          SA_ACCESS_LATENCY="online"
          SA_INSTALLED_ONLINE_CAPACITY=`hash_find SA_TOTAL_SIZE_GB ${SA_UPP}`
          SA_INSTALLED_NEARLINE_CAPACITY=0
          ;;
      esac
    fi

    cat >> ${FILE} << EOF
dn: GlueSALocalID=${SA_LOW}:${SA_RETENTION_POLICY}:${SA_ACCESS_LATENCY},GlueSEUniqueID=${STORM_FRONTEND_PUBLIC_HOST},mds-vo-name=resource,o=grid
GlueSATotalOnlineSize: $((`hash_find SA_TOTAL_SIZE_GB ${SA_UPP}`))
GlueSAUsedOnlineSize: $((`hash_find SA_USED_SIZE_GB ${SA_UPP}`))
GlueSAFreeOnlineSize: $((`hash_find SA_FREE_SIZE_GB ${SA_UPP}`))
GlueSAReservedOnlineSize: $((`hash_find SA_TOTAL_SIZE_GB ${SA_UPP}`))
GlueSACapability: InstalledOnlineCapacity=$((SA_INSTALLED_ONLINE_CAPACITY))
GlueSACapability: InstalledNearlineCapacity=$((SA_INSTALLED_NEARLINE_CAPACITY))
GlueSAStateAvailableSpace: $((`hash_find SA_FREE_SIZE_KB ${SA_UPP}`))
GlueSAStateUsedSpace: $((`hash_find SA_USED_SIZE_KB ${SA_UPP}`))

EOF

  done

#EOF

#  done
  #==========================================================

  # Print built file
  cat ${FILE}
  rm -f ${FILE}

  # Exit with success
  exit 0
