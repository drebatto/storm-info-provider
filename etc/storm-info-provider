#!/usr/bin/python 

# Copyright (c) Istituto Nazionale di Fisica Nucleare (INFN). 2006-2010.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import sys
import argparse
import logging
import os
import exceptions

try:
    import json
except ImportError:
    import simplejson as json

from configuration import Configuration
from spaceinfo import SpaceInfo
from utils import http_get
from glue13 import Glue13
from glue2 import Glue2

def parse_args():
    parser = argparse.ArgumentParser(description = 'Process storm-info-provider args')
    parser.add_argument('-v', action = 'store', dest = 'logging_level', required = False, default=20, type=int)
    subparsers = parser.add_subparsers()
    # create parser for "init" command
    parser_init = subparsers.add_parser('init')
    parser_init.add_argument('-f', action = 'store', dest = 'filepath', required = True)
    #parser_init.add_argument('-v', action = 'store', dest = 'logging_level', required = False, default=20, type=int)
    parser_init.add_argument('-g', action = 'store', dest = 'glue_protocol', required = False, choices=['glue13', 'glue2', 'all'], default='all')
    parser_init.set_defaults(action=init)
    # create parser for "update" command
    parser_update = subparsers.add_parser('update')
    parser_update.add_argument('-f', action = 'store', dest = 'filepath', required = True)
    #parser_update.add_argument('-v', action = 'store', dest = 'logging_level', required = False, default=20, type=int)
    parser_update.add_argument('-g', action = 'store', dest = 'glue_protocol', required = False, choices=['glue13', 'glue2', 'all'], default='glue2')
    parser_update.set_defaults(action=update)
    # create parser for "status" command
    parser_status = subparsers.add_parser('status')
    parser_status.set_defaults(action=status)
    # create parser for "init-env" command
    parser_init_env = subparsers.add_parser('init-env')
    parser_init_env.add_argument('--version', action = 'store', dest = 'version', required = True)
    parser_init_env.add_argument('--endpoint', action = 'store', dest = 'endpoint', required = True)
    parser_init_env.set_defaults(action=init_env)
    return parser.parse_args()

def get_vfs_space_info_from_BE(be_host, be_port, sa_token):
    url = 'http://' + be_host + ':' + str(be_port) + '/info/status/' + sa_token
    data = json.load(http_get(url))
    logging.debug("GET %s = %s", url, data)
    return data["sa-status"]

def get_all_vfs_info_from_BE(be_host, be_port):
    url = 'http://' + be_host + ':' + str(be_port) + '/configuration/1.3/VirtualFSList' 
    data = json.load(http_get(url))
    logging.debug("GET %s = %s", url, data)
    return data

def compute_space_info(configuration):
    # get info from configuration
    supported_vos = configuration.get('VOS').split(' ')
    be_host = configuration.get('STORM_BACKEND_HOST')
    be_port = configuration.get('STORM_BACKEND_REST_SERVICES_PORT')
    # init SpaceInfo
    info = SpaceInfo(supported_vos)
    # get all vfs info from BE
    vfs = get_all_vfs_info_from_BE(be_host, be_port)
    # get vfs's space info
    for vfs_name,vfs_data in vfs.iteritems():
        response = get_vfs_space_info_from_BE(be_host, be_port, vfs_data["token"])    
        # add info retrieved to SpaceInfo object
        info.add_vfs_info(vfs_name, dict(vfs[vfs_name].items() + response.items()))
    return info

def is_backend_running():
    backend_pid_path = "/var/run/storm-backend-server.pid"
    return os.path.isfile(backend_pid_path)

def get_current_serving_state():
    if not is_backend_running():
        return (1, "closed")
    return (4, "production")

def init(arguments):

    # load configuration from file    
    configuration = Configuration(arguments.filepath)
    # get VFSs, VOs and global space use information from backend
    spaceinfo = compute_space_info(configuration)

    if arguments.glue_protocol in ['glue13', 'all']:
        # create Glue v1.3 files
        glue13 = Glue13()
        glue13.init(configuration, spaceinfo)

    if arguments.glue_protocol in ['glue2', 'all']:
        # create Glue v2 files
        glue2 = Glue2()
        glue2.init(configuration, spaceinfo)

    return

def update(arguments):
    # Force logging level to ERROR
    logging.basicConfig(level=40)
 
    # load configuration from file    
    configuration = Configuration(arguments.filepath)
    # get VFSs, VOs and global space use information from backend
    spaceinfo = compute_space_info(configuration)
    # get serving state and value and add them to current configuration
    (state, value) = get_current_serving_state()
    configuration.set("STORM_SERVING_STATE", state)
    configuration.set("STORM_SERVING_STATE_VALUE", value)

    if arguments.glue_protocol in ['glue13', 'all']:
        # create Glue v1.3 files
        glue13 = Glue13()
        glue13.update(configuration, spaceinfo)

    if arguments.glue_protocol in ['glue2', 'all']:
        # create Glue v2 files
        glue2 = Glue2()
        glue2.update(configuration,spaceinfo)

    return

def status(arguments):

    if is_backend_running():
        print "The StoRM Backend server is running"
    else:
        print "The StoRM Backend server is not running"
    return

def init_env(arguments):

    print "GLITE_INFO_SERVICE_ENDPOINT=" + arguments.endpoint
    print "GLITE_INFO_SERVICE_VERSION=" + arguments.version
    return

if __name__ == '__main__':

    # command line parsing
    arguments = parse_args()
    
    # init logging
    logging.basicConfig(level=arguments.logging_level)

    # do ...
    try:
        arguments.action(arguments)
    except Exception, e:
        print str(e)
