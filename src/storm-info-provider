#!/usr/bin/python 

# Copyright (c) Istituto Nazionale di Fisica Nucleare (INFN). 2006-2010.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import sys
import argparse
import logging
import logging.config
import os
import exceptions
import time
import pwd

from info_provider.configuration import Configuration
from info_provider.ldap_utils import LDIFExporter
from info_provider.glue.glue13 import Glue13
from info_provider.glue.glue2 import Glue2
from info_provider.space_info import SpaceInfo

CONFIG_FILE = "/etc/storm/backend-server/storm-yaim-variables.conf"

def parse_args():
    parser = argparse.ArgumentParser(description = 'storm-info-provider args')
    subparsers = parser.add_subparsers()
    # create parser for "init" command
    parser_init = subparsers.add_parser('configure')
    parser_init.add_argument('-f', action = 'store', dest = 'filepath', 
        required = False, default=CONFIG_FILE)
    parser_init.add_argument('-g', action = 'store', dest = 'glue_protocol', 
        required = False, choices=['glue13', 'glue2', 'all'], default='all')
    parser_init.set_defaults(action=configure)
    # create parser for "get-update-ldif" command
    parser_update = subparsers.add_parser('get-update-ldif')
    parser_update.add_argument('-f', action = 'store', dest = 'filepath', 
        required = False, default=CONFIG_FILE)
    parser_update.add_argument('-g', action = 'store', dest = 'glue_protocol', 
        required = False, choices=['glue13', 'glue2'], default='glue2')
    parser_update.set_defaults(action=get_update_ldif)
    # create parser for "get-static-ldif" command
    parser_update = subparsers.add_parser('get-static-ldif')
    parser_update.add_argument('-f', action = 'store', dest = 'filepath', 
        required = False, default=CONFIG_FILE)
    parser_update.add_argument('-g', action = 'store', dest = 'glue_protocol', 
        required = False, choices=['glue13', 'glue2'], default='glue2')
    parser_update.set_defaults(action=get_static_ldif)
    # create parser for "get-serving-state" command
    parser_servingstate = subparsers.add_parser('get-serving-state')
    parser_servingstate.set_defaults(action=get_serving_state)
    return parser.parse_args()

def is_backend_running():
    backend_pid_path = "/var/run/storm-backend-server.pid"
    return os.path.isfile(backend_pid_path)

def get_current_serving_state():
    if not is_backend_running():
        return (1, "closed")
    return (4, "production")

def configure(arguments):

    # load configuration from file    
    configuration = Configuration(arguments.filepath)
    # load space info
    spaceinfo = SpaceInfo(configuration)

    # configure Glue13 info
    if arguments.glue_protocol in ['glue13', 'all']:
        glue13 = Glue13(configuration, spaceinfo)
        glue13.configure()

    # configure Glue2 info
    if arguments.glue_protocol in ['glue2', 'all']:
        # get current serving state
        (value_int, value_str) = get_current_serving_state()
        configuration.set("STORM_SERVING_STATE_VALUE", value_int)
        configuration.set("STORM_SERVING_STATE", value_str)
        glue2 = Glue2(configuration, spaceinfo)
        glue2.configure()

    return

def get_static_ldif(arguments):

    # load configuration from file    
    configuration = Configuration(arguments.filepath)
    # load space info
    spaceinfo = SpaceInfo(configuration)

    exporter = LDIFExporter()

    # get Glue13 static ldif info
    if arguments.glue_protocol in ['glue13']:
        glue13 = Glue13(configuration, spaceinfo)
        exporter.add_nodes(glue13.get_static_ldif_nodes())

    # get Glue2 static ldif info
    if arguments.glue_protocol in ['glue2']:
        # get current serving state
        (value_int, value_str) = get_current_serving_state()
        configuration.set("STORM_SERVING_STATE_VALUE", value_int)
        configuration.set("STORM_SERVING_STATE", value_str)
        glue2 = Glue2(configuration, spaceinfo)
        exporter.add_nodes(glue2.get_static_ldif_nodes())

    exporter.print_nodes(sys.stdout)
    return

def get_update_ldif(arguments):

    # load configuration from file    
    configuration = Configuration(arguments.filepath)
    # load space info
    spaceinfo = SpaceInfo(configuration)

    exporter = LDIFExporter()

    # get Glue13 static ldif info
    if arguments.glue_protocol in ['glue13']:
        glue13 = Glue13(configuration, spaceinfo)
        exporter.add_nodes(glue13.get_update_ldif_nodes())

    # get Glue2 static ldif info
    if arguments.glue_protocol in ['glue2']:
        # get current serving state
        (value_int, value_str) = get_current_serving_state()
        configuration.set("STORM_SERVING_STATE_VALUE", value_int)
        configuration.set("STORM_SERVING_STATE", value_str)
        glue2 = Glue2(configuration, spaceinfo)
        exporter.add_nodes(glue2.get_update_ldif_nodes())

    exporter.print_nodes(sys.stdout)
    return

def get_serving_state(arguments):

    (value_int, value_str) = get_current_serving_state()
    print "%d" % value_int
    return


if __name__ == '__main__':

    #if not (pwd.getpwnam('ldap')[5] == os.getuid()):
    #   print "StoRM Info Provider can be launched only by ldap user"

    # command line parsing
    arguments = parse_args()

    # init logging
    logging.config.fileConfig("/etc/storm/info-provider/logging.conf")

    start = time.clock()
    # do ...
    try:
        arguments.action(arguments)
    except Exception, e:
        print str(e)

    elapsed = time.clock() - start
    logging.info("Received %s - It took %s sec", arguments.action.__name__, 
        elapsed)
